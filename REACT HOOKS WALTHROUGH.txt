REACT HOOKS WALTHROUGH:

USESTATE:
1. GETTER
2. SETTER
3. INITIAL VALUE

const [state, setState] = useState()

********************************************

USEEFFECT:
1. FUNCTION USEEFFECT (HOOK)
2. CALLBACK (LOGIC)
3. DEPENDENCY ARRAY (POINTER)

useEffect(() => {}, [])

********************************************

USEPARAMS:
1. REQUIRES BROWSERROUTER, ROUTES, ROUTE
2. IN APP.JS => ROUTE PATH={'/URL/:id'}
3. /:id => CONST { id } = USEPARAMS()
     ^                  ^
   app.js          component.js

********************************************

USENAVIGATE:
1. REQUIRES BROWSERROUTER, ROUTES, ROUTE
2. IN APP.JS => ROUTE PATH={'/URL'}
3. IN COMPONENT.JS => CONST NAVIGATE = USENAVIGATE()
4. TO USE => NAVIGATE('/URL')

********************************************

USEREF:
1. CONST REF_VARIABLE = USEREF()
2. IN JSX => <ELEMENT ref={REF_VARIABLE}>I AM AN ELEMENT FROM JSX</ELEMENT>
3. THE ABOVE WORKS JUST LIKE document.querySelector() FROM VANILLA JS
EX: REF_VARIABLE.CURRENT (this will give us the entire <ELEMENT> tag if we console.log it)
4. SOME EXAMPLES: 
REF_VARIABLE.CURRENT.STYLE.DISPLAY = 'BLOCK', 
REF_VARIABLE.CURRENT.STYLE.COLOR = 'GOLD',
5. CAN ALSO BE USED TO CAPTURE PREVIOUS VALUES (RARELY USED: STALE VALUES)

*********************************************

USEREDUCER:
PLEASE SEE FLOW DIAGRAM & WALKTHROUGH PNG'S: (COMPLEX STATE MANAGEMENT: OFTEN USED WITH REDUX)

https://github.com/cordovalegacy/UseReducer_Intro

**********************************************

USECONTEXT:
1. USED TO TELEPORT DATA (INSTEAD OF 'PROP DRILLING')
2. CREATES ONE LOCATION WHERE WE CAN HOLD DATA GLOBALLY
3. CREATE CONTEXT OBJECT BEFORE APP.JSX FUNCTION, NEXT TO IMPORTS...AND THEN EXPORT IT
EX: EXPORT CONST MYCONTEXT = CREATECONTEXT()
4. WRAP COMPONENT IN CONTEXT PROVIDER
EX: 
<MYCONTEXT.PROVIDER value={whateverData}>
	<COMPONENT/>
</MYCONTEXT.PROVIDER>
5. GO TO COMPONENT
6. IMPORT MYCONTEXT FROM '../APP.JSX'
7. IMPORT USECONTEXT FROM 'REACT'
8. CONST {whateverData} = USECONTEXT()